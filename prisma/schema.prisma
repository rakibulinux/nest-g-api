generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Forgot {
  id        String    @id @default(uuid()) @map("PK_087959f5bb89da4ce3d763eab75")
  hash      String    @map("forgot_hash") @db.VarChar
  createdAt DateTime  @default(now()) @db.Timestamp(6)
  deletedAt DateTime? @db.Timestamp(6)
  userId    String?
  user      User?     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_31f3c80de0525250f31e23a9b83")

  @@index([hash], map: "IDX_df507d27b0fb20cd5f7bef9b9a")
  @@map("forgot")
}

model File {
  id    String @id @default(uuid()) @map("PK_36b46d232307066b3a2c9ea3a1d") @db.Uuid
  path  String @map("file_path") @db.VarChar
  users User[]

  @@map("file")
}

model User {
  id              String         @id @default(uuid())
  email           String         @unique
  name            String
  password        String
  role            UserRole       @default(customer)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  isEmailVerified Boolean        @default(false)
  reviews         Review[]
  profile         Profile?
  notifications   Notification[]
  orders          Order[]
  forgot          Forgot[]
  file            File?          @relation(fields: [fileId], references: [id])
  fileId          String?        @db.Uuid
  hash            String?        @map("user_hash") @db.VarChar

  @@map("users")
}

model TokenWhiteList {
  id             String   @id @default(uuid())
  userId         String
  accessToken    String?
  refreshToken   String?
  refreshTokenId String?
  expiredAt      DateTime
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@map("tokens")
}

enum UserRole {
  admin
  customer
}

model Profile {
  id         String   @id @default(uuid()) // Unique profile ID
  username   String   @unique
  // Add other user profile fields (e.g., address, phone number, etc.)
  user       User     @relation(fields: [userId], references: [id])
  userId     String   @unique // relation scalar field (used in the `@relation` attribute above)
  bio        String?
  profileImg String?
  phoneNo    String?
  address    String?
  gender     String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("profiles")
}

// Define the Product model
model Product {
  id           String              @id @default(uuid()) // Unique Product ID
  name         String // Product name
  description  String? // Product description
  price        Float // Product price
  category     Category            @relation(fields: [categoryId], references: [id]) // Product category
  availability ProductAvailability @default(available)
  isFeatured   Boolean             @default(false)
  image        String
  categoryId   String
  reviews      Review[]
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt

  @@map("products")
}

enum ProductAvailability {
  available
  upcoming
}

// Define the Category model
model Category {
  id        String    @id @default(uuid()) // Unique category ID
  name      String // Category name
  // Add other category-related fields if needed
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("categories")
}

model Order {
  id        String      @id @default(uuid())
  price     Decimal
  Products  Json[]
  status    OrderStatus @default(pending)
  intent_id String?     @unique
  user      User        @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  @@map("orders")
}

enum OrderStatus {
  pending
  delivered
}

// Define the Review model
model Review {
  id        String   @id @default(uuid()) // Unique review ID
  userId    String // Foreign key to User
  ProductId String // Foreign key to Product
  rating    Float // Rating given by the user
  comment   String? // User's review comment
  user      User     @relation(fields: [userId], references: [id])
  products  Product  @relation(fields: [ProductId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("reviews")
}

// Notification model for user notifications (optional) - Not Done
model Notification {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  content   String // Notification content
  type      String // Notification type (e.g., 'order', 'reminder', 'update')
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("notifications")
}
